// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DesktopApplicationLauncher.Wpf.ComponentTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UpdateApp")]
    public partial class UpdateAppFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UpdateApp.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UpdateApp", "Update current app scenarios", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When app name is updated, the parent id should be preserved")]
        public void WhenAppNameİsUpdatedTheParentİdShouldBePreserved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When app name is updated, the parent id should be preserved", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Type",
                            "ParentId",
                            "HierarchyPath"});
                table7.AddRow(new string[] {
                            "1",
                            "File1",
                            "File",
                            "",
                            ""});
                table7.AddRow(new string[] {
                            "2",
                            "Folder1",
                            "Folder",
                            "",
                            ""});
                table7.AddRow(new string[] {
                            "3",
                            ". File2",
                            "File",
                            "2",
                            "/2/"});
                table7.AddRow(new string[] {
                            "4",
                            ". Folder2",
                            "Folder",
                            "2",
                            "/2/"});
                table7.AddRow(new string[] {
                            "5",
                            ".. Folder3",
                            "Folder",
                            "4",
                            "/2/4/"});
                table7.AddRow(new string[] {
                            "6",
                            ".. File3",
                            "File",
                            "4",
                            "/2/4/"});
                table7.AddRow(new string[] {
                            "7",
                            "... Folder4",
                            "Folder",
                            "6",
                            "/2/4/6/"});
                table7.AddRow(new string[] {
                            "8",
                            ". File4",
                            "File",
                            "2",
                            "/2/"});
                table7.AddRow(new string[] {
                            "9",
                            ". Folder5",
                            "Folder",
                            "2",
                            "/2/"});
#line 6
 testRunner.Given("the following folder structure is", ((string)(null)), table7, "Given ");
#line hidden
#line 17
 testRunner.When("\'File1\' is renamed to \'File11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.And("\'File2\' is renames to \'File21\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("\'File3\' is renames to \'File31\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("\'File4\' is renames to \'File41\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Type",
                            "ParentId",
                            "HierarchyPath"});
                table8.AddRow(new string[] {
                            "1",
                            "File11",
                            "File",
                            "",
                            ""});
                table8.AddRow(new string[] {
                            "2",
                            "Folder1",
                            "Folder",
                            "",
                            ""});
                table8.AddRow(new string[] {
                            "3",
                            ". File21",
                            "File",
                            "2",
                            "/2/"});
                table8.AddRow(new string[] {
                            "8",
                            ". File41",
                            "File",
                            "2",
                            "/2/"});
                table8.AddRow(new string[] {
                            "9",
                            ". Folder5",
                            "Folder",
                            "2",
                            "/2/"});
                table8.AddRow(new string[] {
                            "4",
                            ".. Folder2",
                            "Folder",
                            "9",
                            "/2/9/"});
                table8.AddRow(new string[] {
                            "5",
                            "... Folder3",
                            "Folder",
                            "4",
                            "/2/9/4/"});
                table8.AddRow(new string[] {
                            "6",
                            "... File31",
                            "File",
                            "4",
                            "/2/9/4/"});
                table8.AddRow(new string[] {
                            "7",
                            ".... Folder4",
                            "Folder",
                            "6",
                            "/2/9/4/6/"});
#line 21
 testRunner.Then("the result should be", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
